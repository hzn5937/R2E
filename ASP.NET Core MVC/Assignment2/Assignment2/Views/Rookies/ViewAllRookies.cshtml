@model Assignment2.Model.RookieDto.PaginatedRookieOutputDto

@{
    ViewData["Title"] = "ViewAllRookies";
}

<h1>Rookies</h1>

@if (TempData["DeleteSuccessMsg"] != null)
{
    <div class="alert alert-success" role="alert">
        @TempData["DeleteSuccessMsg"]
    </div>
}

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                Id
            </th>
            <th>
                Full Name
            </th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Rookies) 
{
        <tr>
            
            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>
            <td>
                    <a class="link-primary" asp-action="Details" asp-route-rookieId="@item.Id">@item.FirstName @item.LastName</a>
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { rookieId = item.Id })
            </td>
        </tr>
}       
    </tbody>
</table>

<hr />

@* --- Pagination Controls --- *@
<div>
    @{
        // Calculate previous and next page numbers
        var prevPage = @Model.PageNumber - 1;
        var nextPage = @Model.PageNumber + 1;

        // Basic Previous/Next Links
        <a asp-action="ViewAllRookies"
           asp-route-pageNum="@prevPage"
           class="btn btn-outline-secondary @(!@Model.HasPrevious ? "disabled" : "")">
            &laquo; Previous
        </a>

        <span>&nbsp; Page @Model.PageNumber of @Model.TotalPage &nbsp;</span>

        <a asp-action="ViewAllRookies"
           asp-route-pageNum="@nextPage"
           class="btn btn-outline-secondary @(!@Model.HasNext ? "disabled" : "")">
            Next &raquo;
        </a>

        @* Optional: Add numbered page links (more complex logic) *@
        @* You might loop from 1 to totalPages, adding links, potentially
    showing only a subset of page numbers if totalPages is large. *@
    }
</div>

<div>
    <a asp-action="Index">Back to Action List</a>
</div>